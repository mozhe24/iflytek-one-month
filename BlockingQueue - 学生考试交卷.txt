

/****************************************************

import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;

// Created by admin on 2017/7/27.


class DelayedElement implements Delayed {
    private long expired;
    private long delay;
    private String name;

    DelayedElement(String elementName, long delay)
    {
        this. name = elementName;
        this. delay= delay;
        expired = ( delay + System. currentTimeMillis());
    }

    @Override
    public int compareTo(Delayed o) {
        DelayedElement cached=(DelayedElement) o;
        return cached.getExpired()> expired?1:-1;
    }

    @Override
    public long getDelay(TimeUnit unit) {

        return ( expired - System. currentTimeMillis());
    }

    @Override
    public String toString() {
        return "DelayedElement [delay=" + delay + ", name=" + name + "]";
    }

    public long getExpired() {
        return expired;
    }

}


public class  BlockingQueue
{
    public static void main(String[] args) throws InterruptedException
    {
        DelayQueue<DelayedElement> queue = new DelayQueue<>();
        DelayedElement ele = new DelayedElement("cache 6 seconds", 6000);//等号前面的声明的对象种类是一回事，但运行时具体调用的方法取决于new后面的类的方法。
        queue.put(ele);
        System.out.println(queue.take());//这里打印的是一个被take的对象，不是queue.take()的返回值，每一个非接口类都自带一个toString的实现，可以override

    }
}
**************************************/
import java.util.Random;
import java.util.concurrent.*;

class Student implements Runnable,Delayed
{
    private String name;  //姓名
    private long costTime;//做试题的时间
    private long finishedTime;//完成时间

    public Student(String name, long costTime)
    {
        this. name = name;
        this. costTime= costTime;
        finishedTime = costTime + System. currentTimeMillis();
    }

    @Override
    public void run() {
        System. out.println( name + " 交卷, 用时" + costTime /1000 +"秒");
    }

    @Override
    public long getDelay(TimeUnit unit)
    {
        return ( finishedTime - System. currentTimeMillis());
    }

    @Override
    public int compareTo(Delayed o)
    {
        Student other = (Student) o;
        return costTime >= other. costTime?1:-1;
    }

}

public class BlockingQueue
{
    static final int STUDENT_SIZE = 30;
    public static void main(String[] args) throws InterruptedException
    {
        Random r = new Random();
        //把所有学生看做一个延迟队列
        DelayQueue<Student> students = new DelayQueue<Student>();
        //构造一个线程池用来让学生们“做作业”
        ExecutorService exec = Executors.newFixedThreadPool(STUDENT_SIZE);
        for ( int i = 0; i < STUDENT_SIZE; i++)
        {
            //初始化学生的姓名和做题时间
            students.put( new Student( "学生" + (i + 1), 3000 + r.nextInt(10000)));
        }
        //开始做题
        while(! students.isEmpty())
        {
            exec.execute( students.take());
        }
        exec.shutdown();
    }
}
//通过运行结果我们可以发现，每个学生在指定开始时间到达之后就会“交卷”（取决于getDelay()方法），并且是先做完的先交卷（取决于compareTo()方法）。